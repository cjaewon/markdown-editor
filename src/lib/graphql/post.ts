import gql from 'graphql-tag';
import { User, ProfileLinks } from './user';

export type Post = {
  id: string;
  title: string;
  body: string;
  thumbnail: string;
  is_markdown: boolean;
  is_temp: boolean;
  user: any;
  url_slug: string;
  likes: number;
  meta: any;
  views: number;
  is_private: boolean;
  released_at: string;
  created_at: string;
  updated_at: string;
  short_description: string;
  comments: Comment[];
  tags: string[];
  comments_count: number;
};

export interface Comment {
  id: string;
  user: {
    id: string;
    username: string;
    profile: {
      id: string;
      thumbnail: string | null;
    };
  } | null;
  text: string | null;
  replies_count: number;
  replies?: Comment[];
  created_at: string;
  deleted: boolean;
  level: number;
}

// Post Type for PostList
export type PartialPost = {
  id: string;
  title: string;
  short_description: string;
  thumbnail: string;
  user: User;
  url_slug: string;
  is_private: boolean;
  released_at: string;
  updated_at: string;
  tags: string[];
  comments_count: number;
  likes: number;
};

// Generated by https://quicktype.io
export type SeriesPost = {
  id: string;
  post: {
    id: string;
    title: string;
    url_slug: string;
    user: {
      id: string;
      username: string;
    };
  };
};

export interface LinkedPosts {
  previous: LinkedPost | null;
  next: LinkedPost | null;
}

export interface LinkedPost {
  id: string;
  title: string;
  url_slug: string;
  user: {
    id: string;
    username: string;
  };
}

export interface SinglePost {
  id: string;
  title: string;
  released_at: string;
  updated_at: string;
  tags: string[];
  body: string;
  short_description: string;
  is_markdown: boolean;
  is_private: boolean;
  is_temp: boolean;
  thumbnail: string | null;
  url_slug: string;
  user: {
    id: string;
    username: string;
    profile: {
      id: string;
      display_name: string;
      thumbnail: string;
      short_bio: string;
      profile_links: ProfileLinks;
    };
    velog_config: {
      title: string;
    };
  };
  comments: Comment[];
  comments_count: number;
  series: {
    id: string;
    name: string;
    url_slug: string;
    series_posts: SeriesPost[];
  } | null;
  liked: boolean;
  likes: number;
  linked_posts: LinkedPosts;
}

export interface CommentWithReplies {
  id: string;
  replies: Comment[];
}

export const GET_POST_LIST = gql`
  query Posts(
    $cursor: ID
    $username: String
    $temp_only: Boolean
    $tag: String
    $limit: Int
  ) {
    posts(
      cursor: $cursor
      username: $username
      temp_only: $temp_only
      tag: $tag
      limit: $limit
    ) {
      id
      title
      short_description
      thumbnail
      user {
        id
        username
        profile {
          id
          thumbnail
        }
      }
      url_slug
      released_at
      updated_at
      comments_count
      tags
      is_private
      likes
    }
  }
`;

export const GET_TRENDING_POSTS = gql`
  query TrendingPosts($limit: Int, $offset: Int, $timeframe: String) {
    trendingPosts(limit: $limit, offset: $offset, timeframe: $timeframe) {
      id
      title
      short_description
      thumbnail
      likes
      user {
        id
        username
        profile {
          id
          thumbnail
        }
      }
      url_slug
      released_at
      updated_at
      comments_count
      tags
      is_private
    }
  }
`;

export type GetTrendingPostsResponse = {
  trendingPosts: PartialPost[];
};

export const READ_POST = gql`
  query ReadPost($username: String, $url_slug: String) {
    post(username: $username, url_slug: $url_slug) {
      id
      title
      released_at
      updated_at
      tags
      body
      short_description
      is_markdown
      is_private
      is_temp
      thumbnail
      comments_count
      url_slug
      likes
      liked
      user {
        id
        username
        profile {
          id
          display_name
          thumbnail
          short_bio
          profile_links
        }
        velog_config {
          title
        }
      }
      comments {
        id
        user {
          id
          username
          profile {
            id
            thumbnail
          }
        }
        text
        replies_count
        level
        created_at
        level
        deleted
      }
      series {
        id
        name
        url_slug
        series_posts {
          id
          post {
            id
            title
            url_slug
            user {
              id
              username
            }
          }
        }
      }
      linked_posts {
        previous {
          id
          title
          url_slug
          user {
            id
            username
          }
        }
        next {
          id
          title
          url_slug
          user {
            id
            username
          }
        }
      }
    }
  }
`;

export const READ_POST_FOR_EDIT = gql`
  query ReadPostForEdit($id: ID) {
    post(id: $id) {
      id
      title
      tags
      body
      short_description
      is_markdown
      is_private
      is_temp
      thumbnail
      url_slug
      updated_at
      series {
        id
        name
      }
    }
  }
`;

export type ReadPostForEditResponse = {
  post: {
    id: string;
    title: string;
    tags: string[];
    body: string;
    short_description: string;
    is_markdown: boolean;
    is_private: boolean;
    is_temp: boolean;
    thumbnail: string | null;
    url_slug: string;
    series: {
      id: string;
      name: string;
    } | null;
    updated_at: string;
  };
};

export const GET_COMMENTS_COUNT = gql`
  query GetCommentsCount($id: ID!) {
    post(id: $id) {
      id
      comments_count
    }
  }
`;

export const RELOAD_COMMENTS = gql`
  query ReloadComments($id: ID!) {
    post(id: $id) {
      id
      comments_count
      comments {
        id
        user {
          id
          username
          profile {
            id
            thumbnail
          }
        }
        text
        replies_count
        level
        created_at
        deleted
      }
    }
  }
`;

export const GET_COMMENT = gql`
  query GetComment($id: ID!) {
    comment(comment_id: $id) {
      id
      user {
        id
        username
        profile {
          thumbnail
        }
      }
      text
      replies_count
      level
      created_at
      deleted
    }
  }
`;

export const GET_REPLIES = gql`
  query ReloadReplies($id: ID!) {
    comment(comment_id: $id) {
      id
      replies {
        id
        user {
          id
          username
          profile {
            id
            thumbnail
          }
        }
        text
        replies_count
        created_at
        level
        deleted
      }
    }
  }
`;

export const GET_LAST_POST_HISTORY = gql`
  query GetLastPostHistory($post_id: ID!) {
    lastPostHistory(post_id: $post_id) {
      id
      title
      body
      created_at
      is_markdown
    }
  }
`;

export type GetLastPostHistoryResult = {
  lastPostHistory: {
    id: string;
    title: string;
    body: string;
    created_at: string;
    is_markdown: boolean;
  };
};

export const WRITE_POST = gql`
  mutation WritePost(
    $title: String
    $body: String
    $tags: [String]
    $is_markdown: Boolean
    $is_temp: Boolean
    $is_private: Boolean
    $url_slug: String
    $thumbnail: String
    $meta: JSON
    $series_id: ID
  ) {
    writePost(
      title: $title
      body: $body
      tags: $tags
      is_markdown: $is_markdown
      is_temp: $is_temp
      is_private: $is_private
      url_slug: $url_slug
      thumbnail: $thumbnail
      meta: $meta
      series_id: $series_id
    ) {
      id
      user {
        id
        username
      }
      url_slug
    }
  }
`;

export type WritePostResponse = {
  writePost: {
    id: string;
    user: {
      id: string;
      username: string;
    };
    url_slug: string;
  };
};

export const EDIT_POST = gql`
  mutation EditPost(
    $id: ID!
    $title: String
    $body: String
    $tags: [String]
    $is_markdown: Boolean
    $is_temp: Boolean
    $is_private: Boolean
    $url_slug: String
    $thumbnail: String
    $meta: JSON
    $series_id: ID
  ) {
    editPost(
      id: $id
      title: $title
      body: $body
      tags: $tags
      is_markdown: $is_markdown
      is_temp: $is_temp
      is_private: $is_private
      url_slug: $url_slug
      thumbnail: $thumbnail
      meta: $meta
      series_id: $series_id
    ) {
      id
      title
      released_at
      updated_at
      tags
      body
      short_description
      is_markdown
      is_private
      is_temp
      thumbnail
      comments_count
      url_slug
      user {
        id
        username
        profile {
          id
          display_name
          thumbnail
          short_bio
        }
        velog_config {
          title
        }
      }
      comments {
        id
        user {
          id
          username
          profile {
            id
            thumbnail
          }
        }
        text
        replies_count
        level
        created_at
        level
        deleted
      }
      series {
        id
        name
        url_slug
        series_posts {
          id
          post {
            id
            title
            url_slug
            user {
              id
              username
            }
          }
        }
      }
    }
  }
`;

export type EditPostResult = {
  editPost: SinglePost;
};

export const WRITE_COMMENT = gql`
  mutation WriteComment($post_id: ID!, $text: String!, $comment_id: ID) {
    writeComment(post_id: $post_id, text: $text, comment_id: $comment_id) {
      id
      user {
        id
        username
        profile {
          id
          thumbnail
        }
      }
      text
      replies_count
    }
  }
`;

export const EDIT_COMMENT = gql`
  mutation EditComment($id: ID!, $text: String!) {
    editComment(id: $id, text: $text) {
      id
      text
    }
  }
`;

export const REMOVE_COMMENT = gql`
  mutation RemoveComment($id: ID!) {
    removeComment(id: $id)
  }
`;

export const REMOVE_POST = gql`
  mutation RemovePost($id: ID!) {
    removePost(id: $id)
  }
`;

export const LIKE_POST = gql`
  mutation LikePost($id: ID!) {
    likePost(id: $id) {
      id
      likes
      liked
    }
  }
`;

export const UNLIKE_POST = gql`
  mutation UnlikePost($id: ID!) {
    unlikePost(id: $id) {
      id
      likes
      liked
    }
  }
`;

export const SEARCH_POSTS = gql`
  query SearchPosts($keyword: String!, $offset: Int, $username: String) {
    searchPosts(keyword: $keyword, offset: $offset, username: $username) {
      count
      posts {
        id
        title
        short_description
        thumbnail
        user {
          id
          username
          profile {
            id
            thumbnail
          }
        }
        url_slug
        released_at
        tags
        is_private
        comments_count
      }
    }
  }
`;

export type SearchPostsResponse = {
  searchPosts: {
    posts: PartialPost[];
    count: number;
  };
};

export const CREATE_POST_HISTORY = gql`
  mutation CreatePostHistory(
    $post_id: ID!
    $title: String!
    $body: String!
    $is_markdown: Boolean!
  ) {
    createPostHistory(
      post_id: $post_id
      title: $title
      body: $body
      is_markdown: $is_markdown
    ) {
      id
    }
  }
`;

export type CreatePostHistoryResponse = {
  createPostHistory: {
    id: string;
    user: {
      id: string;
      username: string;
    };
    url_slug: string;
  };
};

export const POST_VIEW = gql`
  mutation PostView($id: ID!) {
    postView(id: $id)
  }
`;

export type PostViewResponse = {
  postView: boolean;
};

export const GET_READING_LIST = gql`
  query ReadingList($type: ReadingListOption, $cursor: ID, $limit: Int) {
    readingList(type: $type, cursor: $cursor, limit: $limit) {
      id
      title
      short_description
      thumbnail
      user {
        id
        username
        profile {
          id
          thumbnail
        }
      }
      url_slug
      released_at
      updated_at
      comments_count
      tags
      is_private
      likes
    }
  }
`;

export type GetReadingListResponse = {
  readingList: PartialPost[];
};
